#ifndef __AOL_INIT__
#define __AOL_INIT__

typedef struct credentialsval {
    char tokenid[120];
    char secret[120];
    char accesspoint[120];
} credentials;

typedef struct requestval {
    credentials c;
    char ** emc_headers;
    char * path;
    char * method;
    char * range;
    char * content_type;
    char * date;
    char * uid;
    char * signature;
} request;

typedef enum http_methodval   {
	POST,
	GET,
	PUT,
	DELETE,
	HEAD,
	OPTIONS
} http_method;


typedef struct ACLval {
    char **permissions;
} acl;

//metavalues are max size 1k
typedef struct Metaval {
    char key[1024];
    char value[1024];
    int listable;
} meta;

typedef struct PD {
    void *data;
    int datsize;
} postdata;

#define HTTP_HDR_SIZE 4096

//Namespace
const char* create_ns(credentials *c, char * path, acl *acl, meta *meta);
const char* list_ns(credentials *c, char * path);
const char* update_ns(credentials *c, char * path, acl *acl, void* data, meta *meta);
int delete_ns(credentials *c, char *object_id);
int set_meta_ns(credentials *c, const char *object_name, const char *key, const char *val);
int get_meta_ns(credentials *c,const char *object_name);

//Object


//atmos specific helpers
credentials* init_ws(const char *user_id, const char *key, const char *endpoint);
meta create_meta(char* key, char* val, int listable);


//generic Â´helper functions
const char *http_request(credentials *c,http_method method, char *path,char **headers, int header_count, postdata*) ;
const char *http_request_ns(credentials *c,http_method method, char *path,char **headers, int header_count, postdata*) ;
int build_hash_string (char *hash_string, const http_method method, const char *content_type, const char *range,const char *date, const char *path, char **emc_sorted_headers, const int header_count);
char*  sign(char *hash_string, const char *key);
void get_date(char *formated);


///////// const30
/////

#endif
